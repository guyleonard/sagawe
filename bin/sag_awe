#!/usr/bin/env bash

#
# Program Functions
#
function run_trim_galore () {
    trimmed_dir="$( cd "${1}" && pwd )/trimmed"

    if [ -d "${trimmed_dir}" ] ; then
        echo "[SAGAWE:WARN] - Adaptor Trimming Previously Run"
        echo "[SAGAWE:INFO] - Skipping to Next Step"
    else
        mkdir -p "${trimmed_dir}"
        fastqc_dir="${trimmed_dir}/fastqc"
        mkdir -p "${fastqc_dir}"

        echo "[SAGAWE:INFO] - Running Trim Galore! on Raw Reads"
        trim_galore -q 20 --fastqc --'gzip' --length 50 --paired --retain_unpaired \
        "${READ1}" "${READ2}" -o "${trimmed_dir}" 2>&1 | tee "${trimmed_dir}/trim_galore.log"

        read1="$(basename "${READ1}")" # get filename
        read1="${read1%%.*}"         # remove extension
        cat "${trimmed_dir}/${read1}_unpaired_1.fq.gz" "${trimmed_dir}/${read1/r1/r2}_unpaired_2.fq.gz" > "${trimmed_dir}/${read1/r1/all}_unpaired.fq.gz"

        mv "${trimmed_dir}/"*".html" "${fastqc_dir}"
        mv "${trimmed_dir}/"*".zip" "${fastqc_dir}"
        mv "${trimmed_fir}/"*".txt" "${fastqc_dir}"
    fi
}

function run_normalisation () {
    trimmed_dir="$( cd "${1}" && pwd )/trimmed"
    normalised_dir="$( cd "${1}" && pwd )/normalised"

    if [ -d "${normalised_dir}" ] ; then
        echo "[SAGAWE:WARN] - Normalisation Previously Run"
        echo "[SAGAWE:INFO] - Skipping to Next Step"
    else
        mkdir -p "${normalised_dir}"

        read1=$(basename "${READ1}") # get filename
        read2=$(basename "${READ2}")

        echo "[SAGAWE:INFO] - Running BBNorm on Trimmed Reads"
        bbnorm.sh \
        in1="${trimmed_dir}/${read1/.fq.gz/_val_1.fq.gz}" \
        in2="${trimmed_dir}/${read2/.fq.gz/_val_2.fq.gz}" \
        out1="${normalised_dir}/${read1/.fq.gz/_normalised.fq.gz}" \
        out2="${normalised_dir}/${read2/.fq.gz/_normalised.fq.gz}" \
        outt="${normalised_dir}/excluded_reads.fq.gz" \
        hist="${normalised_dir}/input_kmer_depth.hist" \
        histout="${normalised_dir}/output_kmer_depth.hist" \
        threads="${THREADS}" 2>&1 | tee "${normalised_dir}/bbnorm.log"
    fi
}

function run_bbmerge () {
    trimmed_dir="$( cd "${1}" && pwd )/trimmed"
    normalised_dir="$( cd "${1}" && pwd )/normalised"
    merged_dir=""

    read1=$(basename "${READ1}")
    read2=$(basename "${READ2}")

    if [ "${NORMALISED}" == "true" ] ; then
        merged_dir="${normalised_dir}/merged"

        if [ -d "${merged_dir}" ] ; then
            echo "[SAGAWE:WARN] - Merging Previously Run"
            echo "[SAGAWE:INFO] - Skipping to Next Step"
        else
            mkdir -p "${merged_dir}"

            echo "[SAGAWE:INFO] - Running BBMerge with Trimmed-Normalised Reads"
            bbmerge.sh \
            in1="${normalised_dir}/${read1/.fq.gz/_normalised.fq.gz}" \
            in2="${normalised_dir}/${read2/.fq.gz/_normalised.fq.gz}" \
            out="${merged_dir}/${read1/r1.fq.gz/normalised_merged.fq.gz}" \
            outu1="${merged_dir}/${read1/.fq.gz/_normalised_unmerged.fq.gz}" \
            outu2="${merged_dir}/${read2/.fq.gz/_normalised_unmerged.fq.gz}" \
            minoverlap=10 ziplevel=9 2>&1 | tee "${merged_dir}/bbmerge.log"
        fi
    else
        merged_dir="${trimmed_dir}/merged"
        if [ -d "${merged_dir}" ] ; then
            echo "[SAGAWE:WARN] - Merging Previously Run"
            echo "[SAGAWE:INFO] - Skipping to Next Step"
        else
            mkdir -p "${merged_dir}"

            echo "[SAGAWE:INFO] - Running BBMerge with Trimmed Reads"
            bbmerge.sh \
            in1="${trimmed_dir}/${read1/.fq.gz/_val_1.fq.gz}" \
            in2="${trimmed_dir}/${read2/.fq.gz/_val_2.fq.gz}" \
            out="${merged_dir}/${read1/r1.fq.gz/merged.fq.gz}" \
            outu1="${merged_dir}/${read1/.fq.gz/_unmerged.fq.gz}" \
            outu2="${merged_dir}/${read2/.fq.gz/_unmerged.fq.gz}" \
            minoverlap=10 ziplevel=9 2>&1 | tee "${merged_dir}/bbmerge.log"
        fi
    fi
}

function run_assembly_spades {
    trimmed_dir="$( cd "${1}" && pwd )/trimmed"
    normalised_dir="$( cd "${1}" && pwd )/normalised"
    assembly_dir="$( cd "${1}" && pwd )/assembly"

    read1=$(basename "${READ1}")
    read2=$(basename "${READ2}")

    if [[ "${MERGED}" == "true" && "${NORMALISED}" == "true" ]] ; then
        merged_dir="${normalised_dir}/merged"
        assembly_dir="${assembly_dir}/tnm"

        if [ -d "${assembly_dir}" ] ; then
            echo "[SAGAWE:WARN] - TNM Assembly Previously Run"
            echo "[SAGAWE:INFO] - Skipping to Next Step"
        else
            echo "[SAGAWE:INFO] - Running Assembly with Trimmed-Normalised-Merged Reads"
            mkdir -p "${assembly_dir}"

            spades.py --sc --careful -t "$THREADS" \
            --pe1-m "${merged_dir}/${read1/r1.fq.gz/normalised_merged.fq.gz}" \
            --pe1-1 "${merged_dir}/${read1/.fq.gz/_normalised_unmerged.fq.gz}" \
            --pe1-2 "${merged_dir}/${read2/.fq.gz/_normalised_unmerged.fq.gz}" \
            -o "$assembly_dir"
         fi
    elif [[ "${MERGED}" == "true" && "${NORMALISED}" == "false" ]] ; then
        merged_dir="${trimmed_dir}/merged"
        assembly_dir="${assembly_dir}/tm"
        if [ -d "${assembly_dir}" ] ; then
            echo "[SAGAWE:WARN] - TM Assembly Previously Run"
            echo "[SAGAWE:INFO] - Skipping to Next Step"
        else
            echo "[SAGAWE:INFO] - Running Assembly with Trimmed-Merged Reads"
            mkdir -p "${assembly_dir}"

            spades.py --sc --careful -t "$THREADS" \
            --pe1-m "${merged_dir}/${read1/r1.fq.gz/merged.fq.gz}" \
            --pe1-1 "${merged_dir}/${read1/.fq.gz/_unmerged.fq.gz}" \
            --pe1-2 "${merged_dir}/${read2/.fq.gz/_unmerged.fq.gz}" \
            -o "$assembly_dir"
        fi
    elif [[ "${MERGED}" == "false" && "${NORMALISED}" == "true" ]] ; then
        assembly_dir="${assembly_dir}/tn"
        if [ -d "${assembly_dir}" ] ; then
            echo "[SAGAWE:WARN] - TN Assembly Previously Run"
            echo "[SAGAWE:INFO] - Skipping to Next Step"
        else
            echo "[SAGAWE:INFO] - Running Assembly with Trimmed-Normalised Reads"
            mkdir -p "${assembly_dir}"

            spades.py --sc --careful -t "$THREADS" \
            --pe1-1 "${normalised_dir}/${read1/.fq.gz/_normalised.fq.gz}" \
            --pe1-2 "${normalised_dir}/${read2/.fq.gz/_normalised.fq.gz}" \
            -o "$assembly_dir"
        fi
    else
        assembly_dir="${assembly_dir}/t"
        if [ -d "${assembly_dir}" ] ; then
            echo "[SAGAWE:WARN] - T Assembly Previously Run"
            echo "[SAGAWE:INFO] - Skipping to Next Step"
        else
            echo "[SAGAWE:INFO] - Running Assembly with Trimmed Reads"
            mkdir -p "${assembly_dir}"

            spades.py --sc --careful -t "$THREADS" \
            --pe1-1 "${trimmed_dir}/${read1/.fq.gz/_val_1.fq.gz}" \
            --pe1-2 "${trimmed_dir}/${read2/.fq.gz/_val_2.fq.gz}" \
            --pe1-s "${trimmed_dir}/${read1/r1.fq.gz/all_unpaired.fq.gz}" \
            -o "$assembly_dir"
        fi
    fi
}

#
# Report Functions
#

function report_quast_four () {
    assembly_dir="$( cd "${1}" && pwd )/assembly"
    quast_dir="$( cd "${1}" && pwd )/reports/quast"

   if [[ "${MERGED}" == "true" && "${NORMALISED}" == "true" ]] ; then
        echo "[SAGAWE:INFO] - Running QUAST on Trimmed-Normalised-Merged Assembly"

        quast_dir="${quast_dir}_tnm"
        mkdir -p "${quast_dir}"

        quast.py -o "${quast_dir}" -t "$THREADS" \
        --min-contig 100 -f --eukaryote $QUAST_SCAFFOLDS \
        --glimmer "${assembly_dir}/tnm/$ASSEMBLY" 2>&1 | tee "${quast_dir}/quast.log"
    elif [[ "${MERGED}" == "true" && "${NORMALISED}" == "false" ]] ; then
        echo ""
    elif [[ "${MERGED}" == "false" && "${NORMALISED}" == "true" ]] ; then
        echo ""
    else
        echo ""
    fi
}

#
# Workflow Functions
#
function help_message () {
    echo -e "Single Amplified Genome Assembly Workflow Example (SAG-AWE)"
    echo -e "Input Options (required):"
    echo -e "\t-f <r1.fq|r1.fq.gz>\tRead Library Pair 1"
    echo -e "\t-r <r2.fq|r2.fq.gz>\tRead Library Pair 2"
    echo -e "Output Options (required):"
    echo -e "\t-o <output_dir>\tOutput Directory"
    echo -e "Program Parameters:"
    echo -e "\t-t\t Run Trim Galore!"
    echo -e "Optional Parameters:"
    echo -e "Reports/Stats:"
    echo -e "Example: sag_awe"
    exit 1
}

#
# Accessory Functions
#
function cores () {
    cores=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || sysctl -n hw.ncpu)
    echo $(($cores / 2))
}

function cite_log () {
    absolute_path=${1}
    output_dir=${2}
    echo "Single Amplified Genome Assembly Workflow" > "${absolute_path}/$output_dir.log"
    echo -e "Please cite:\thttps://github.com/guyleonard/sagawe\n" >> "$absolute_path/$output_dir.log"
    echo -e "Output Dir:\t$absolute_path" >> "$absolute_path/$output_dir.log"
    echo -e "Date Started:\t$(date +%Y-%m-%d-%R)" >> "$absolute_path/$output_dir.log"
    echo -e "Location:\t$HOSTNAME" >> "$absolute_path/$output_dir.log"
    echo -e "Command:\t${0} ${ARGS}" >> "$absolute_path/$output_dir.log"
    echo -e "Individual logs for each step are located in their respective folder." >> "$absolute_path/$output_dir.log"
}

#
# Workflow Variables
#
THREADS=$(cores)
NORMALISED="false"
MERGED="false"
ASSEMBLY="contigs.fasta"
QUAST_SCAFFOLDS=""
READ1=""
READ2=""
OUTDIR="output_sagawe"
ARGS=$@
NUMARGS=$#
if [ "${NUMARGS}" -eq 0 ]; then
    help_message
fi

#
# Getopts Workflow
#
while getopts "f:r:o:tnmsqh" FLAG; do
    case ${FLAG} in
        f)
            READ1=${OPTARG}
	    ;;
        r)
            READ2=${OPTARG}
            ;;
        o)
            OUTDIR=${OPTARG}
	    mkdir -p "${OUTDIR}"
            absolute_path="$( cd "${OUTDIR}" && pwd )"
            cite_log "${absolute_path}" "${OUTDIR}"
            ;;
        t)
            run_trim_galore "${OUTDIR}"
            ;;
        n)
            run_normalisation "${OUTDIR}"
            NORMALISED="true"
            ;;
        m)
            run_bbmerge "${OUTDIR}"
            MERGED="true"
            ;;
        q)
            report_quast_four "${OUTDIR}"
            ;;
        s)
            run_assembly_spades "${OUTDIR}"
            ;;
        S)
            ASSEMBLY="scaffolds.fasta"
            QUAST_SCAFFOLDS="--scaffolds"
            ;;
        h)
            help_message
	    ;;
        \?)
	    help_message
            ;;
    esac
done

if [ ! "${OUTDIR}" ]; then
    echo "No output directory set. Please indicate -o" >&2
    exit 1
fi

absolute_path="$( cd "${OUTDIR}" && pwd )"
echo -e "Date Finished:\t$(date +%Y-%m-%d-%R)" >> "$absolute_path/$output_dir.log"
exit 0
