#!/usr/bin/env bash


#
# Program Functions
#
function run_trim_galore () {
    trimmed_dir="${1}/trimmed"

    if [ -d "${trimmed_dir}" ] ; then
        echo "[SAGAWE:WARN] - Raw Read Adaptor Trimming Previously Run"
        echo "[SAGAWE:INFO] - Skipping to Next"
    else
        mkdir -p "${trimmed_dir}"
        fastqc_dir="${trimmed_dir}/fastqc"
        mkdir -p "${fastqc_dir}"

        echo "[SAGAWE:INFO] - Running Trim Galore! on Raw Reads"
        trim_galore -q 20 --fastqc --'gzip' --length 50 \
        "${READ1}" "${READ2}" -o "${trimmed_dir}" 2>&1 | tee "${trimmed_dir}/trim_galore.log"
    fi
}


#
# Workflow Functions
#
function help_message () {
    echo -e "Single Amplified Genome Assembly Workflow Example (SAG-AWE)"
    echo -e "Input Options (required):"
    echo -e "\t-f <r1.fq|r1.fq.gz>\tRead Library Pair 1"
    echo -e "\t-r <r2.fq|r2.fq.gz>\tRead Library Pair 2"
    echo -e "Output Options (required):"
    echo -e "\t-o <output_dir>\tOutput Directory"
    echo -e "Program Parameters:"
    echo -e "\t-t\t Run Trim Galore!"
    echo -e "Optional Parameters:"
    echo -e "Reports/Stats:"
    echo -e "Example: sag_awe"
    exit 1
}

#
# Accessory Functions
#
function cores () {
    cores=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || sysctl -n hw.ncpu)
    echo $(($cores / 2))
}

function cite_log () {
    absolute_path=${1}
    output_dir=${2}
    echo "Single Amplified Genome Assembly Workflow" > "${absolute_path}/$output_dir.log"
    echo -e "Please cite:\thttps://github.com/guyleonard/sagawe\n" >> "$absolute_path/$output_dir.log"
    echo -e "Output Dir:\t$absolute_path" >> "$absolute_path/$output_dir.log"
    echo -e "Date Run:\t$(date +%Y-%m-%d-%R)" >> "$absolute_path/$output_dir.log"
    echo -e "Location:\t$HOSTNAME" >> "$absolute_path/$output_dir.log"
    echo -e "Command:\t${0} ${ARGS}" >> "$absolute_path/$output_dir.log"
}

#
# Workflow Variables
#
THREADS=$(cores)
NORMALISED="false"
ASSEMBLY="contigs.fasta"
READ1=""
READ2=""
OUTDIR="output_sagawe"
ARGS=$@
NUMARGS=$#
if [ "${NUMARGS}" -eq 0 ]; then
    help_message
fi

#
# Getopts Workflow
#
while getopts f:r:o:th FLAG; do
    case ${FLAG} in
        f)
            READ1=${OPTARG}
	    ;;
        r)
            READ2=${OPTARG}
            ;;
        o)
            OUTDIR=${OPTARG}
	    mkdir -p "${OUTDIR}"
            absolute_path="$( cd "${OUTDIR}" && pwd )"
            cite_log "${absolute_path}" "${OUTDIR}"
            ;;
        t)
            run_trim_galore "${OUTDIR}"
            ;;
        h)
            help_message
	    ;;
        \?)
	    help_message
    esac
done

if [ ! "${OUTDIR}" ]; then
    echo "No output directory set. Please indicate -o" >&2
    exit 1
fi

exit 0
