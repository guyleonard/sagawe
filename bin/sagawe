#!/usr/bin/env bash

#
# Program Functions
#
function run_trim_galore () {
    trimmed_dir="$( cd "${OUTDIR}" && pwd )/trimmed"

    if [ -d "${trimmed_dir}" ] ; then
        echo "[SAGAWE:WARN] - Adaptor Trimming Previously Run"
        echo "[SAGAWE:INFO] - Skipping to Next Step"
    else
        mkdir -p "${trimmed_dir}"
        fastqc_dir="${trimmed_dir}/fastqc"
        mkdir -p "${fastqc_dir}"

        echo "[SAGAWE:INFO] - Running Trim Galore! on Raw Reads"
        trim_galore -q 20 --fastqc --'gzip' --length 50 --paired --retain_unpaired \
        "${READ1}" "${READ2}" -o "${trimmed_dir}" 2>&1 | tee "${trimmed_dir}/sag_awe_trim_galore.log"

        read1="$(basename ${READ1%%.*})"
        read2="$(basename ${READ2%%.*})"

        cat "${trimmed_dir}/${read1}_unpaired_1.fq.gz" "${trimmed_dir}/${read2}_unpaired_2.fq.gz" > "${trimmed_dir}/unpaired_all.fq.gz"

        mv "${trimmed_dir}/"*".html" "${fastqc_dir}"
        mv "${trimmed_dir}/"*".zip" "${fastqc_dir}"
        mv "${trimmed_dir}/"*".txt" "${fastqc_dir}"
    fi
}

function run_normalisation () {
    trimmed_dir="$( cd "${OUTDIR}" && pwd )/trimmed"
    normalised_dir="$( cd "${OUTDIR}" && pwd )/normalised"

    read1="$(basename ${READ1%%.*})"
    read2="$(basename ${READ2%%.*})"

    if [[ "${READ1}" == "" || "${READ2}" == "" ]] ; then
    	echo "[SAGAWE:ERROR] - You Must Specifiy Input Reads with -f and -r"
    	exit 1
    elif [ ! -f "${trimmed_dir}/${read1}_val_1.fq.gz" ] ; then
        echo "[SAGAWE:ERRR] - Trimming Has Not Been Run. Please re-run with the -t option. Quiting."
        exit 1
    fi

    if [ -d "${normalised_dir}" ] ; then
        echo "[SAGAWE:WARN] - Normalisation Previously Run"
        echo "[SAGAWE:INFO] - Skipping to Next Step"
    else
        mkdir -p "${normalised_dir}"

        echo "[SAGAWE:INFO] - Running BBNorm on Trimmed Reads"
        bbnorm.sh \
        in1="${trimmed_dir}/${read1}_val_1.fq.gz" \
        in2="${trimmed_dir}/${read2}_val_2.fq.gz" \
        out1="${normalised_dir}/${read1}_normalised.fq.gz" \
        out2="${normalised_dir}/${read2}_normalised.fq.gz" \
        outt="${normalised_dir}/excluded_reads.fq.gz" \
        hist="${normalised_dir}/input_kmer_depth.hist" \
        histout="${normalised_dir}/output_kmer_depth.hist" \
        threads="${THREADS}" 2>&1 | tee "${normalised_dir}/sag_awe_bbnorm.log"
    fi
}

function run_bbmerge () {
    trimmed_dir="$( cd "${OUTDIR}" && pwd )/trimmed"
    normalised_dir="$( cd "${OUTDIR}" && pwd )/normalised"
    merged_dir=""

    read1="$(basename ${READ1%%.*})"
    read2="$(basename ${READ2%%.*})"

    if [ ! -f "${trimmed_dir}/${read1}_val_1.fq.gz" ] ; then
        echo "[SAGAWE:ERROR] - Trimming Has Not Been Run. Please re-run with the -t option. Stopping"
        exit 1
    fi

    if [ "${NORMALISED}" == "true" ] ; then
        merged_dir="${normalised_dir}/merged"

        if [ -d "${merged_dir}" ] ; then
            echo "[SAGAWE:WARN] - Merging Previously Run"
            echo "[SAGAWE:INFO] - Skipping to Next Step"
        else
            mkdir -p "${merged_dir}"

            echo "[SAGAWE:INFO] - Running BBMerge with Trimmed-Normalised Reads"
            bbmerge.sh \
            in1="${normalised_dir}/${read1}_normalised.fq.gz" \
            in2="${normalised_dir}/${read2}_normalised.fq.gz" \
            out="${merged_dir}/normalised_merged.fq.gz" \
            outu1="${merged_dir}/${read1}_normalised_unmerged.fq.gz" \
            outu2="${merged_dir}/${read2}_normalised_unmerged.fq.gz" \
            minoverlap=10 ziplevel=9 2>&1 | tee "${merged_dir}/sag_awe_bbmerge.log"
        fi
    else
        merged_dir="${trimmed_dir}/merged"
        if [ -d "${merged_dir}" ] ; then
            echo "[SAGAWE:WARN] - Merging Previously Run"
            echo "[SAGAWE:INFO] - Skipping to Next Step"
        else
            mkdir -p "${merged_dir}"

            echo "[SAGAWE:INFO] - Running BBMerge with Trimmed Reads"
            bbmerge.sh \
            in1="${trimmed_dir}/${read1}_val_1.fq.gz" \
            in2="${trimmed_dir}/${read2}_val_2.fq.gz" \
            out="${merged_dir}/merged.fq.gz" \
            outu1="${merged_dir}/${read1}_unmerged.fq.gz" \
            outu2="${merged_dir}/${read2}_unmerged.fq.gz" \
            minoverlap=10 ziplevel=9 2>&1 | tee "${merged_dir}/sag_awe_bbmerge.log"
        fi
    fi
}

function run_assembly_spades {
    trimmed_dir="$( cd "${OUTDIR}" && pwd )/trimmed"
    normalised_dir="$( cd "${OUTDIR}" && pwd )/normalised"
    assembly_dir="$( cd "${OUTDIR}" && pwd )/assembly"

    read1="$(basename ${READ1%%.*})"
    read2="$(basename ${READ2%%.*})"

    if [ ! -f "${trimmed_dir}/${read1}_val_1.fq.gz" ] ; then
        echo "[SAGAWE:ERROR] - Trimming Has Not Been Run. Please re-run with the -t option. Stopping"
        exit 1
    fi

    if [[ "${MERGED}" == "true" && "${NORMALISED}" == "true" ]] ; then
        merged_dir="${normalised_dir}/merged"
        assembly_dir="${assembly_dir}/tnm"

        if [ -f "${assembly_dir}/${ASSEMBLY}" ] ; then
            echo "[SAGAWE:WARN] - TNM Assembly Previously Run"
            echo "[SAGAWE:INFO] - Skipping to Next Step"
        else
            echo "[SAGAWE:INFO] - Running Assembly with Trimmed-Normalised-Merged Reads"
            mkdir -p "${assembly_dir}"

            spades.py ${SC} --careful -t "$THREADS" \
            --pe1-m "${merged_dir}/normalised_merged.fq.gz" \
            --pe1-1 "${merged_dir}/${read1}_normalised_unmerged.fq.gz" \
            --pe1-2 "${merged_dir}/${read2}_normalised_unmerged.fq.gz" \
            -o "$assembly_dir"
         fi
    elif [[ "${MERGED}" == "true" && "${NORMALISED}" == "false" ]] ; then
        merged_dir="${trimmed_dir}/merged"
        assembly_dir="${assembly_dir}/tm"

        if [ -f "${assembly_dir}/${ASSEMBLY}" ] ; then
            echo "[SAGAWE:WARN] - TM Assembly Previously Run"
            echo "[SAGAWE:INFO] - Skipping to Next Step"
        else
            echo "[SAGAWE:INFO] - Running Assembly with Trimmed-Merged Reads"
            mkdir -p "${assembly_dir}"

            spades.py ${SC} --careful -t "$THREADS" \
            --pe1-m "${merged_dir}/merged.fq.gz" \
            --pe1-1 "${merged_dir}/${read1}_unmerged.fq.gz" \
            --pe1-2 "${merged_dir}/${read2}_unmerged.fq.gz" \
            -o "$assembly_dir"
        fi
    elif [[ "${MERGED}" == "false" && "${NORMALISED}" == "true" ]] ; then
        assembly_dir="${assembly_dir}/tn"

        if [ -f "${assembly_dir}/${ASSEMBLY}" ] ; then
            echo "[SAGAWE:WARN] - TN Assembly Previously Run"
            echo "[SAGAWE:INFO] - Skipping to Next Step"
        else
            echo "[SAGAWE:INFO] - Running Assembly with Trimmed-Normalised Reads"
            mkdir -p "${assembly_dir}"

            spades.py ${SC} --careful -t "$THREADS" \
            --pe1-1 "${normalised_dir}/${read1}_normalised.fq.gz" \
            --pe1-2 "${normalised_dir}/${read2}_normalised.fq.gz" \
            -o "$assembly_dir"
        fi
    else
        assembly_dir="${assembly_dir}/t"

        if [ -f "${assembly_dir}/${ASSEMBLY}" ] ; then
            echo "[SAGAWE:WARN] - T Assembly Previously Run"
            echo "[SAGAWE:INFO] - Skipping to Next Step"
        else
            echo "[SAGAWE:INFO] - Running Assembly with Trimmed Reads"
            mkdir -p "${assembly_dir}"

            spades.py ${SC} --careful -t "$THREADS" \
            --pe1-1 "${trimmed_dir}/${read1}_val_1.fq.gz" \
            --pe1-2 "${trimmed_dir}/${read2}_val_2.fq.gz" \
            --pe1-s "${trimmed_dir}/unpaired_all.fq.gz" \
            -o "$assembly_dir"
        fi
    fi
}

#
# Report Functions
#
function report_quast () {
    assembly_type="${1}"

    trimmed_dir="$( cd "${OUTDIR}" && pwd )/trimmed"
    assembly_dir="$( cd "${OUTDIR}" && pwd )/assembly/${assembly_type}"

    quast_dir="$( cd "${OUTDIR}" && pwd )/reports/${assembly_type}/${LIMIT_DIR}/quast"
    blobtools_dir="$( cd "${OUTDIR}" && pwd )/reports/${assembly_type}/${LIMIT_DIR}/blobtools/mapping"

    kat_dir="$( cd "${OUTDIR}" && pwd )/reports/kat"
    genome_size=''

    read1="$(basename ${READ1%%.*})"
    read2="$(basename ${READ2%%.*})"  

    if [[ ! -f "${assembly_dir}/${ASSEMBLY}" ]] ; then
         echo "[SAGAWE:ERROR] - ${assembly_type}/${ASSEMBLY} does not exist. Please run this script again with the -s and correct -t -n -m options."
         exit 1
    fi

    if [[ -f "${kat_dir}/kat.hist.dist_analysis.json" ]] ; then
        gs=$(grep -Po '"est_genome_size": \d+,' "${kat_dir}/kat.hist.dist_analysis.json")
        genome_size="--est-ref-size ${gs//[!0-9]/}"
        echo "[SAGAWE:INFO] - Retrieved Estimated Genome Size from KAT: ${gs//[!0-9]/}"

        if [[ ${gs//[!0-9]/} -eq '0' ]] ; then
            echo "[SAGAWE:WARN] - Estimated Genome Size Missing or Zero"
            genome_size=''
        fi
    fi

    mkdir -p "${quast_dir}"

    if [[ -f "${blobtools_dir}/${ASSEMBLY/.fasta/}_mapped_all_reads.bam" ]] ; then
        echo "[SAGAWE:INFO] - Running QUAST on ${assembly_type} Assembly with ${ASSEMBLY} and Mapped Trimmed Reads"
        quast.py -o "${quast_dir}" -t "${THREADS}" --glimmer \
        --min-contig "${LIMIT}" --k-mer-stats --rna-finding --eukaryote \
        --bam "${blobtools_dir}/${ASSEMBLY/.fasta/}_mapped_all_reads.bam" \
        ${QUAST_SCAFFOLDS} ${genome_size} "${assembly_dir}/${ASSEMBLY}" 2>&1 | tee "${quast_dir}/sag_awe_quast.log"
    else
        echo "[SAGAWE:INFO] - Running QUAST on ${assembly_type} Assembly with ${ASSEMBLY} and Mapping Trimmed Reads"
        quast.py -o "${quast_dir}" -t "${THREADS}" --glimmer \
        --min-contig "${LIMIT}" --k-mer-stats --rna-finding --eukaryote \
        -1 "${trimmed_dir}/${read1}_val_1.fq.gz" \
        -2 "${trimmed_dir}/${read2}_val_2.fq.gz" \
        ${QUAST_SCAFFOLDS} ${genome_size} "${assembly_dir}/${ASSEMBLY}" 2>&1 | tee "${quast_dir}/sag_awe_quast.log"
    fi
}

function report_busco_v3 () {
    assembly_type="${1}"

    assembly_dir="$( cd "${OUTDIR}" && pwd )/assembly/${assembly_type}"
    busco_dir="$( cd "${OUTDIR}" && pwd )/reports/${assembly_type}/${LIMIT_DIR}/busco"

    busco_dir="${busco_dir}"
    mkdir -p "${busco_dir}/summaries"

    IFS=\, read -r -a current_db <<<"${BUSCO_LINEAGES}"
    for lineage in "${current_db[@]}";do
        echo "[SAGAWE:INFO] - Running BUSCO on ${assembly_type} Assembly with ${ASSEMBLY} and ${lineage}"

        lineage_name="$(basename "${lineage}")"
        run_BUSCO.py -i "${assembly_dir}/${ASSEMBLY}" \
        -c "${THREADS}" -o "${lineage_name}" -m genome \
        -l "${lineage}" 2>&1 | tee "${busco_dir}/sag_awe_busco.log"

        mv "run_${lineage_name}" "${busco_dir}"
        ln -s "${busco_dir}/run_${lineage_name}/short_summary_${lineage_name}.txt" "${busco_dir}/summaries"
    done

    generate_plot.py -wd "${busco_dir}/summaries"
}

function report_cegma () {
    assembly_type="${1}"

    assembly_dir="$( cd "${OUTDIR}" && pwd )/assembly/${assembly_type}"
    cegma_dir="$( cd "${OUTDIR}" && pwd )/reports/${assembly_type}/${LIMIT_DIR}/cegma"

    if [ ! -f "${assembly_dir}/${ASSEMBLY}" ] ; then
        echo -e "[SAGAWE:ERROR] - SPAdes ${ASSEMBLY} cannot be found. Skipping."
    else
        mkdir -p "$cegma_dir"

        echo "[SAGAWE:INFO] - Running CEGMA on ${assembly_type} with ${ASSEMBLY}"
        cegma -T "${THREADS}" -g "${assembly_dir}/${ASSEMBLY}" -o "${cegma_dir}/cegma" 2>&1 | tee "${cegma_dir}/sag_awe_cegma.log"

        mv "${cegma_dir}/cegma."* "${cegma_dir}"
    fi
}

function report_blobtools () {
    assembly_type="${1}"

    report_blobtools_mapping "${assembly_type}"
    report_blobtools_blast  "${assembly_type}"
    report_blobtools_output "${assembly_type}"
}

function report_blobtools_mapping () {
    assembly_type="${1}"
    trimmed_dir="$( cd "${OUTDIR}" && pwd )/trimmed"
    assembly_dir="$( cd "${OUTDIR}" && pwd )/assembly/${assembly_type}"

    blobtools_dir="$( cd "${OUTDIR}" && pwd )/reports/${assembly_type}/${LIMIT_DIR}/blobtools"

    read1="$(basename ${READ1%%.*})"
    read2="$(basename ${READ2%%.*})"

    mapping_dir="${blobtools_dir}/mapping"
    
    if [[ -f "${mapping_dir}/${ASSEMBLY/.fasta/}_mapped_all_reads_sorted.bam" ]] ; then
        echo "[SAGAWE:INFO] - BAM File Created Previously, Next!"
    else
        mkdir -p "${mapping_dir}"
        ln -s "${assembly_dir}/${ASSEMBLY}" "${mapping_dir}/${ASSEMBLY}"

        echo "[SAGAWE:INFO] - Indexing ${assembly_type} Assembly with ${ASSEMBLY}"
        bwa index -a bwtsw "${mapping_dir}/${ASSEMBLY}" 2>&1 | tee "${mapping_dir}/sag_awe_bwa.log"

        echo "[SAGAWE:INFO] - Mapping Trimmed Paired Reads to ${ASSEMBLY}"
        bwa mem -t "${THREADS}" "${mapping_dir}/${ASSEMBLY}" \
        "${trimmed_dir}/${read1}_val_1.fq.gz" \
        "${trimmed_dir}/${read2}_val_2.fq.gz" \
        > "${mapping_dir}/${ASSEMBLY/.fasta/}_mapped_paired_reads.sam"

        echo "[SAGAWE:INFO] - Mapping Trimmed Un-Paired Reads to ${ASSEMBLY}"
        bwa mem -t "${THREADS}" "${mapping_dir}/${ASSEMBLY}" \
        "${trimmed_dir}/unpaired_all.fq.gz" \
        > "${mapping_dir}/${ASSEMBLY/.fasta/}_mapped_unpaired_reads.sam"

        echo "[SAGAWE:INFO] - Sorting Paired SAM File and Converting to BAM"
        samtools sort -@ "${THREADS}" -o "${mapping_dir}/${ASSEMBLY/.fasta/}_mapped_paired_reads.bam" \
        "${mapping_dir}/${ASSEMBLY/.fasta/}_mapped_paired_reads.sam"

        echo "[SAGAWE:INFO] - Sorting Un-Paired SAM Files and Converting to BAM"
        samtools sort -@ "${THREADS}" -o "${mapping_dir}/${ASSEMBLY/.fasta/}_mapped_unpaired_reads.bam" \
        "${mapping_dir}/${ASSEMBLY/.fasta/}_mapped_unpaired_reads.sam"

        echo "[SAGAWE:INFO] - Merging BAM Files"
        samtools merge -@ "${THREADS}" -f "${mapping_dir}/${ASSEMBLY/.fasta/}_mapped_all_reads.bam" \
        "${mapping_dir}/${ASSEMBLY/.fasta/}_mapped_paired_reads.bam" \
        "${mapping_dir}/${ASSEMBLY/.fasta/}_mapped_unpaired_reads.bam"

        echo "[SAGAWE:INFO] - Sorting Merged BAM File"
        samtools sort -@ "${THREADS}" -o "${mapping_dir}/${ASSEMBLY/.fasta/}_mapped_all_reads_sorted.bam" \
        "${mapping_dir}/${ASSEMBLY/.fasta/}_mapped_all_reads.bam"

        echo "[SAGAWE:INFO] - Indexing Merged Sorted Bam"
        samtools index "${mapping_dir}/${ASSEMBLY/.fasta/}_mapped_all_reads_sorted.bam"

        rm "${mapping_dir}/${ASSEMBLY/.fasta/}_mapped_paired_reads.sam"
        rm "${mapping_dir}/${ASSEMBLY/.fasta/}_mapped_unpaired_reads.sam"
    fi
}

function report_blobtools_blast {
    assembly_type="${1}"
    assembly_dir="$( cd "${OUTDIR}" && pwd )/assembly/${assembly_type}"

    blobtools_dir="$( cd "${OUTDIR}" && pwd )/reports/${assembly_type}/${LIMIT_DIR}/blobtools"

    blast_dir="${blobtools_dir}/blast"
    if [ -f "${blast_dir}/${ASSEMBLY/.fasta/}_vs_$(basename "${NCBI_DB}")_1e-10.megablast" ]; then
        echo "[SAGAWE:WARN] - megaBLAST has already been run! Skipping."
    else
        mkdir -p "${blast_dir}"
        ln -s "${assembly_dir}/${ASSEMBLY}" "${blast_dir}/${ASSEMBLY}"
        echo "[SAGAWE:INFO] - Running megaBLAST on $assembly_type Assembly with ${ASSEMBLY}"

        blastn -task megablast -query "${blast_dir}/${ASSEMBLY}" -db "${NCBI_DB}" \
        -evalue 1e-10 -num_threads "${THREADS}" \
        -outfmt '6 qseqid staxids bitscore std sscinames sskingdoms stitle' \
        -culling_limit 5 -out "${blast_dir}/${ASSEMBLY/.fasta/}_vs_$(basename "${NCBI_DB}")_1e-10.megablast" \
        2>&1 | tee "${blast_dir}/sag_awe_blast.log"
    fi
}

function report_blobtools_output {
    assembly_type="${1}"
    blobtools_dir="$( cd "${OUTDIR}" && pwd )/reports/${assembly_type}/${LIMIT_DIR}/blobtools"
    
    mapping_dir="${blobtools_dir}/mapping"
    blast_dir="${blobtools_dir}/blast"
    table_dir="${blobtools_dir}/tables"
    image_dir="${blobtools_dir}/images"
    mkdir -p "${table_dir}"
    mkdir -p "${image_dir}"

    echo "[SAGAWE:INFO] - Running BlobTools CREATE"
    blobtools create -i "${blast_dir}/${ASSEMBLY}" \
    --nodes "${NCBI_TAX}/nodes.dmp" --names "${NCBI_TAX}/names.dmp" \
    -t "${blast_dir}/${ASSEMBLY/.fasta/}_vs_$(basename "${NCBI_DB}")_1e-10.megablast" \
    -b "${mapping_dir}/${ASSEMBLY/.fasta/}_mapped_all_reads_sorted.bam" \
    -o "${blobtools_dir}/${ASSEMBLY/.fasta/}_vs_nt_1e-10_megablast_blobtools" 2>&1 | tee -a "$blobtools_dir/sag_awe_blobtools.log"

    echo "[SAGAWE:INFO] - Running BlobTools View - Phylum"
    blobtools view -i "${blobtools_dir}/${ASSEMBLY/.fasta/}_vs_nt_1e-10_megablast_blobtools.blobDB.json" \
    --out "${table_dir}/phylum" \
    --rank "phylum" 2>&1 | tee -a "$blobtools_dir/sag_awe_blobtools.log"

    echo "[SAGAWE:INFO] - Running BlobTools View - Super Kingdom"
    blobtools view -i "${blobtools_dir}/${ASSEMBLY/.fasta/}_vs_nt_1e-10_megablast_blobtools.blobDB.json" \
    --out "${table_dir}/superkingdom" \
    --rank "superkingdom" 2>&1 | tee -a "$blobtools_dir/sag_awe_blobtools.log"

    echo "[SAGAWE:INFO] - Running BlobTools Plot PNG - Phylum"
    blobtools plot -i "${blobtools_dir}/${ASSEMBLY/.fasta/}_vs_nt_1e-10_megablast_blobtools.blobDB.json" \
    --rank "phylum" --out "${image_dir}/" 2>&1 | tee -a "$blobtools_dir/sag_awe_blobtools.log"

    echo "[SAGAWE:INFO] - Running BlobTools Plot PNG - Super Kingdom"
    blobtools plot -i "${blobtools_dir}/${ASSEMBLY/.fasta/}_vs_nt_1e-10_megablast_blobtools.blobDB.json" \
    --rank "superkingdom" --out "${image_dir}/" 2>&1 | tee -a "$blobtools_dir/sag_awe_blobtools.log"

    echo "[SAGAWE:INFO] - Running BlobTools Plot SVG - Phylum"
    blobtools plot -i "${blobtools_dir}/${ASSEMBLY/.fasta/}_vs_nt_1e-10_megablast_blobtools.blobDB.json" \
    --rank "phylum" --format "svg" --out "${image_dir}/" 2>&1 | tee -a "$blobtools_dir/sag_awe_blobtools.log"

    echo "[SAGAWE:INFO] - Running BlobTools Plot SVG - Super Kingdom"
    blobtools plot -i "${blobtools_dir}/${ASSEMBLY/.fasta/}_vs_nt_1e-10_megablast_blobtools.blobDB.json" \
    --rank "superkingdom" --format "svg" --out "${image_dir}/" 2>&1 | tee -a "$blobtools_dir/sag_awe_blobtools.log"
}

function report_qualimap () {
    assembly_type="${1}"

    qualimap_dir="$( cd "${OUTDIR}" && pwd )/reports/${assembly_type}/${LIMIT_DIR}/qualimap"
    blobtools_dir="$( cd "${OUTDIR}" && pwd )/reports/${assembly_type}/${LIMIT_DIR}/blobtools/mapping"

    if [[ -f "${blobtools_dir}/${ASSEMBLY/.fasta/}_mapped_all_reads_sorted.bam" ]] ; then
        echo "[SAGAWE:INFO] - Running Qualimap on ${blobtools_dir}/${ASSEMBLY/.fasta/}_mapped_all_reads_sorted.bam"

        qualimap bamqc -nt "${THREADS}"\
        -bam "${blobtools_dir}/${ASSEMBLY/.fasta/}_mapped_all_reads_sorted.bam" \
        -outdir "${qualimap_dir}" \
        -outformat pdf
    else
        echo "[SAGAWE:WARN] - Not Running Qualimap: ${blobtools_dir}/${ASSEMBLY/.fasta/}_mapped_all_reads.bam does not exist!"
    fi
}

function report_kat () {
    trimmed_dir="$( cd "${OUTDIR}" && pwd )/trimmed"
    kat_dir="$( cd "${OUTDIR}" && pwd )/reports/kat"

    mkdir -p "${kat_dir}"

    read1="$(basename ${READ1%%.*})"
    read2="$(basename ${READ2%%.*})"

    if [[ -f "${kat_dir}/kat.hist-hash.jf27" ]] ; then
        echo "[SAGAWE:WARN] - KAT Previously Run, Skipping."
    else
        echo "[SAGAWE:INFO] - Running KAT on Trimmed Reads"
        kat hist -o "${kat_dir}"/kat.hist -d -t "${THREADS}" \
        "${trimmed_dir}/${read1}_val_1.fq.gz" \
        "${trimmed_dir}/${read2}_val_2.fq.gz" \
        "${trimmed_dir}/unpaired_all.fq.gz"
    fi

    if [[ -f "${kat_dir}/kat.hist.dist_analysis.json" ]] ; then
        gs=$(grep -Po '"est_genome_size": \d+,' "${kat_dir}/kat.hist.dist_analysis.json")
        echo "[SAGAWE:INFO] - Retrieved Estimated Genome Size from KAT: ${gs//[!0-9]/}"
        if [[ ${gs//[!0-9]/} -eq '0' ]] ; then
            echo "[SAGAWE:WARN] - Estimated Genome Size Missing or Zero"
        fi
    fi
}

function report_smudgeplot () {
    kat_dir="$( cd "${OUTDIR}" && pwd )/reports/kat"
    smudge_dir="$( cd "${OUTDIR}" && pwd )/reports/smudgeplot"

    if [[ ! -f "${kat_dir}/kat.hist-hash.jf27" ]] ; then
        echo "[SAGAWE:ERRR] - You need to run KAT with the -k option first! Skipping."
    else 
        echo "[SAGAWE:INFO] - Running Smudge Plot"
        mkdir -p "${smudge_dir}"

        sed -e '1,6d' < "${kat_dir}/kat.hist" > "${kat_dir}/kat.hist_temp"

        echo "[SAGAWE:INFO] - Getting upper and lower Kmer Cutoffs"
        L=$(smudgeplot.py cutoff ${kat_dir}/kat.hist_temp L)
        U=$(smudgeplot.py cutoff ${kat_dir}/kat.hist_temp U)
        echo "$L $U" > "${smudge_dir}/sag_awe_smudgeplots.log"
        
        echo "[SAGAWE:INFO] - Dumping Kmer Counts Using Jellyfish"
        jellyfish dump -c -L $L -U $U "${kat_dir}/kat.hist-hash.jf27" > "${smudge_dir}/extracted_kmers"
        
        echo "[SAGAWE:INFO] - Running Smudge Plot hetkmers on ${smudge_dir}/extracted_kmers"
        smudgeplot.py hetkmers "${smudge_dir}/extracted_kmers"

        echo "[SAGAWE:INFO] - Tidying Up Smudge Plot"
        mv kmerpairs_coverages.tsv kmerpairs_sequences.tsv "${smudge_dir}"
        pigz -9 -f "${smudge_dir}/extracted_kmers"

        echo "[SAGAWE:INFO] - Running Smudge Plot plot on ${smudge_dir}/kmerpairs_coverages.tsv"
        smudgeplot.py plot "${smudge_dir}/kmerpairs_coverages.tsv"
        mv smudgeplot* "${smudge_dir}"

        #rm "${kat_dir}kat.hist-hash.jf27"
    fi
}

function report_genomescope () {
    kat_dir="$( cd "${OUTDIR}" && pwd )/reports/kat"
    gs_dir="$( cd "${OUTDIR}" && pwd )/reports/genomescope"

    if [[ ! -f "${kat_dir}/kat.hist" ]] ; then
        echo "[SAGAWE:ERR] - You need to run KAT with the -k option first! Skipping."
    else
        mkdir -p "${gs_dir}"

        sed -e '1,6d' < "${kat_dir}/kat.hist" > "${kat_dir}/kat.hist_temp"

        echo "[SAGAWE:INFO] - Running GenomeScope on KAT kmer histogram."
        genomescope.R "${kat_dir}/kat.hist_temp" 27 150 "${gs_dir}"
    fi
}

function report_multiqc () {
    assembly_type="${1}"
    multiqc_dir="$( cd "${OUTDIR}" && pwd )/reports/multiqc/${assembly_type}"

    echo "[SAGAWE:INFO] - Running MultiQC on ${OUTDIR}/${assembly_type}"
    multiqc -f -z -o "${multiqc_dir}" "${OUTDIR}"
}

#
# Accessory Functions
#
function get_assembly_type () {
    local assembly_type=""

    if [[ "${MERGED}" == "true" && "${NORMALISED}" == "true" ]] ; then
        assembly_type="tnm"
    elif [[ "${MERGED}" == "true" && "${NORMALISED}" == "false" ]] ; then
        assembly_type="tm"
    elif [[ "${MERGED}" == "false" && "${NORMALISED}" == "true" ]] ; then
        assembly_type="tn"
    else
        assembly_type="t"
    fi
    echo "${assembly_type}"
}

function make_limited_file () {
    assembly_type="${1}"
    assembly_dir="$( cd "${OUTDIR}" && pwd )/assembly/${assembly_type}"

    echo "[SAGAWE:INFO] - Generating Reduced Assembly from ${assembly_dir}/${ASSEMBLY}"
    seqtk seq -L "${LIMIT}" "${assembly_dir}/${ASSEMBLY}" > "${assembly_dir}/${ASSEMBLY/.fasta/\_ge\_${LIMIT}\.fasta}"

}

function help_message () {
    echo -e "Single Amplified Genome Assembly Workflow Example (SAG-AWE)"
    echo -e "\tOptions are positional, i.e. they are run sequentially, e.g. -S must come before -q."
    echo -e "Input Options (required):"
    echo -e "\t-f <r1.fq|r1.fq.gz>\tRead Library Pair 1"
    echo -e "\t-r <r2.fq|r2.fq.gz>\tRead Library Pair 2"
    echo -e "Output Options (required):"
    echo -e "\t-o <output_dir>\tOutput Directory"
    echo -e "Run Program:"
    echo -e "\t-t\tRun Trim Galore!"
    echo -e "\t-n\tRun Normalisation"
    echo -e "\t-m\tRun Read Merging"
    echo -e "\t-s\tRun Assembly"
    echo -e "Optional Parameters:"
    echo -e "\t-C\tUse to turn off Single-Cell mode in SPAdes"
    echo -e "\t-S\tUse scaffolds.fasta instead of contigs.fasta"
    echo -e "\t-L <int>\tLimit contigs or scaffolds in reports to >= <int>bp"
    echo -e "General Reports:"
    echo -e "\t-k\tRun KAT Analysis (run to inform QUAST)"
    echo -e "\t-g\tRun GenomeScope (requires previous -k)"
    echo -e "\t-p\tRun Smudge Plots (requires previous -k)"
    echo -e "Contig/Scaffold Specific Reports:"
    echo -e "\t-B </path/to/blast/db,/path/to/taxdump>\tRun Blobtools"
    echo -e "\t-q\tRun QUAST Analysis"
    echo -e "\t-Q\tRun Qualimap Analysis"
    echo -e "\t-b </path/to/db1,/path/to/db2,...>\tRun BUSCO with Multiple Lineages"
    echo -e "\t-M\tRun MultiQC Analysis"
    echo -e "Legacy Reports:"
    echo -e "\t-c\tRun CEGMA Analysis (legacy, use -b)"
    echo -e "Example: sagawe -f read1.fq.gz -r read2.fq.gz -o results -t -n -m -s -q"
    exit 1
}

function cores () {
    cores=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || sysctl -n hw.ncpu)
    echo $((cores / 2))
}

function cite_log () {
    output_dir="$( cd "${OUTDIR}" && pwd )"
    echo -e "Single Amplified Genome Assembly Workflow" > "${output_dir}/sag_awe.log"
    echo -e "Please cite:\thttps://github.com/guyleonard/sagawe\n" >> "${output_dir}/sag_awe.log"
    echo -e "Output Dir:\t${output_dir}" >> "${output_dir}/sag_awe.log"
    echo -e "Date Started:\t$(date +%Y-%m-%d-%R)" >> "${output_dir}/sag_awe.log"
    echo -e "Location:\t$HOSTNAME" >> "${output_dir}/sag_awe.log"
    echo -e "Command:\t${0} ${ARGS}" >> "${output_dir}/sag_awe.log"
    echo -e "Individual logs for each step are located in their respective folder." >> "${output_dir}/sag_awe.log"
}

#
# Workflow Variables
#
ARGS=$@
ASSEMBLY="contigs.fasta"
BUSCO_LINEAGES=''
F_FLAG="false"
LIMIT='500'
LIMIT_DIR='all'
MERGED="false"
NCBI_DB=''
NCBI_TAX=''
NORMALISED="false"
NUMARGS=$#
OUTDIR="false"
QUAST_SCAFFOLDS=""
R_FLAG="false"
READ1=''
READ2=''
SC="--sc"
TAXDB=''
THREADS=$(cores)

if [ "${NUMARGS}" -eq 0 ]; then
    help_message
    exit 1
fi

#
# Getopts Workflow
#
while getopts ":f:r:o:tnmCskgqSL:cb:B:T:QpMh" FLAG; do
    case "${FLAG}" in
        f)
            READ1="${OPTARG}"
            F_FLAG="true"
	    ;;
        r)
            READ2="${OPTARG}"
            R_FLAG="true"
            ;;
        o)
            OUTDIR="${OPTARG}"
            if [[ "${OPTARG}" =~ ^- ]] ; then
                echo "[SAGAWE:ERROR] - Output Directory Missing. Please Indicate -o <dir_name>" >&2
                exit 1
            fi
	        mkdir -p "${OUTDIR}"
            cite_log "${OUTDIR}"
            ;;
        t)
            if [[ "${OUTDIR}" == "false" ]] ; then
                echo "[SAGAWE:ERROR] - Output Directory Missing. Please Indicate -o <dir_name>" >&2
                exit 1
            fi
            run_trim_galore
            ;;
        n)
            run_normalisation
            NORMALISED="true"
            ;;
        m)
            run_bbmerge
            MERGED="true"
            ;;
        C)
            SC=""
            echo "[SAGAWE:WARN] - Turning Off Single-Cell Mode" >&2
            ;;
        s)
            run_assembly_spades
            ;;
        k)
            assembly_type=$(get_assembly_type)
            report_kat "${assembly_type}"
            ;;
        g)
            assembly_type=$(get_assembly_type)
            report_genomescope "${assembly_type}"
            ;;
        q)
            assembly_type=$(get_assembly_type)
            report_quast "${assembly_type}"
            ;;
        S)
            ASSEMBLY="scaffolds.fasta"
            QUAST_SCAFFOLDS="-s"
            ;;
        L)
            LIMIT="${OPTARG}"
            echo "[SAGAWE:INFO] - Limit supplied as ${LIMIT}bp"
            assembly_type=$(get_assembly_type)
            make_limited_file "${assembly_type}"
            ASSEMBLY="${ASSEMBLY/.fasta/\_ge\_${LIMIT}\.fasta}"
            LIMIT_DIR="ge_${LIMIT}"
            ;;  
        c)
            assembly_type=$(get_assembly_type)
            report_cegma "${assembly_type}"
            ;;
        b)
            BUSCO_LINEAGES="${OPTARG}"
            assembly_type=$(get_assembly_type)
            report_busco_v3 "${assembly_type}"
            ;;
        B)
            paths="${OPTARG}"
            NCBI_DB=$(echo "${paths}" | cut -f 1 -d ',')
            NCBI_TAX=$(echo "${paths}" | cut -f 2 -d ',')
            if [[ ! -f "${NCBI_TAX}/nodes.dmp" || ! -f "${NCBI_TAX}/names.dmp" ]] ; then
                echo "[SAGAWE:ERROR] - nodes.dmp or names.dmp Not Found at Location: ${NCBI_TAX}. Please Correct."
		        exit 1
            fi
            assembly_type=$(get_assembly_type)
            report_blobtools "${assembly_type}"
            ;;
        Q)
	        assembly_type=$(get_assembly_type)
            report_qualimap "${assembly_type}"
            ;;
        p)
            assembly_type=$(get_assembly_type)
            report_smudgeplot "${assembly_type}"
            ;;
        M)
            assembly_type=$(get_assembly_type)
            report_multiqc "${assembly_type}"
            ;;
        h)
            help_message
	    ;;
        \?)
	    help_message
            ;;
    esac
done

if ((OPTIND == 1))
then
    echo "[SAGAWE:WARN] - No Options Specified!"
fi

shift $((OPTIND - 1))

if [[ "${R_FLAG}" == "false" ]]; then
    echo "[SAGAWE:ERROR] - Paired Read #2 Missing. Please Indicate -r <r2.fq|r2.fq.gz>" >&2
    exit 1
fi

if [[ "${F_FLAG}" == "false" ]]; then
    echo "[SAGAWE:ERROR] - Paired Read #1 Missing. Please Indicate -f <r1.fq|r1.fq.gz>" >&2
    exit 1
fi

if [[ "${OUTDIR}" == "false" ]]; then
    echo "[SAGAWE:ERROR] - Output Directory Missing. Please Indicate -o <dir_name>" >&2
    exit 1
fi

output_dir="$( cd "${OUTDIR}" && pwd )"
echo -e "Date Finished:\t$(date +%Y-%m-%d-%R)" >> "${output_dir}/sag_awe.log"
exit 0
